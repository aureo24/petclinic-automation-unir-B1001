"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LifecycleState = void 0;
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
class LifecycleState {
  constructor() {
    var _this = this;
    _defineProperty(this, "scopes", new Map());
    _defineProperty(this, "testResults", new Map());
    _defineProperty(this, "stepResults", new Map());
    _defineProperty(this, "fixturesResults", new Map());
    _defineProperty(this, "getScope", uuid => this.scopes.get(uuid));
    _defineProperty(this, "getWrappedFixtureResult", uuid => this.fixturesResults.get(uuid));
    _defineProperty(this, "getFixtureResult", uuid => {
      var _this$getWrappedFixtu;
      return (_this$getWrappedFixtu = this.getWrappedFixtureResult(uuid)) === null || _this$getWrappedFixtu === void 0 ? void 0 : _this$getWrappedFixtu.value;
    });
    _defineProperty(this, "getTestResult", uuid => this.testResults.get(uuid));
    _defineProperty(this, "getStepResult", uuid => this.stepResults.get(uuid));
    _defineProperty(this, "getExecutionItem", uuid => {
      var _ref, _this$getFixtureResul;
      return (_ref = (_this$getFixtureResul = this.getFixtureResult(uuid)) !== null && _this$getFixtureResul !== void 0 ? _this$getFixtureResul : this.getTestResult(uuid)) !== null && _ref !== void 0 ? _ref : this.getStepResult(uuid);
    });
    // test results
    _defineProperty(this, "setTestResult", (uuid, result) => {
      this.testResults.set(uuid, result);
    });
    _defineProperty(this, "deleteTestResult", uuid => {
      this.testResults.delete(uuid);
    });
    // steps
    _defineProperty(this, "setStepResult", (uuid, result) => {
      this.stepResults.set(uuid, result);
    });
    _defineProperty(this, "deleteStepResult", uuid => {
      this.stepResults.delete(uuid);
    });
    // fixtures
    _defineProperty(this, "setFixtureResult", (uuid, type, result) => {
      var wrappedResult = {
        uuid,
        type,
        value: result
      };
      this.fixturesResults.set(uuid, wrappedResult);
      return wrappedResult;
    });
    _defineProperty(this, "deleteFixtureResult", uuid => {
      this.fixturesResults.delete(uuid);
    });
    // test scopes
    _defineProperty(this, "setScope", function (uuid) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var scope = _objectSpread(_objectSpread({
        fixtures: [],
        tests: []
      }, data), {}, {
        uuid
      });
      _this.scopes.set(uuid, scope);
      return scope;
    });
    _defineProperty(this, "deleteScope", uuid => {
      this.scopes.delete(uuid);
    });
  }
}
exports.LifecycleState = LifecycleState;
//# sourceMappingURL=LifecycleState.js.map