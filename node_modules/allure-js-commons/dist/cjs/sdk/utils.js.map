{"version":3,"file":"utils.js","names":["_model","require","_wrapRegExp","e","r","BabelRegExp","RegExp","prototype","WeakMap","t","p","o","set","get","_setPrototypeOf","buildGroups","Object","keys","reduce","i","length","create","_inherits","exec","call","groups","indices","Symbol","replace","Array","isArray","join","arguments","slice","push","apply","TypeError","constructor","value","writable","configurable","defineProperty","setPrototypeOf","bind","__proto__","getStatusFromError","error","test","name","message","Status","FAILED","BROKEN","exports","ansiRegex","onlyFirst","undefined","pattern","stripAnsi","str","regex","getMessageAndTraceFromError","stack","trace","allureIdRegexp","id","allureIdRegexpGlobal","allureLabelRegexp","allureLabelRegexpGlobal","isMetadataTag","tag","extractMetadataFromString","title","labels","split","forEach","val","_val$match","idValue","match","LabelName","ALLURE_ID","labelMatch","cleanTitle","trim","isAnyStepFailed","item","isFailed","status","steps","find","step","isAllStepsEnded","every","stop","hasLabel","testResult","labelName","l","hasStepMessage","messages","some","type","getStepsMessagesPair","acc","unfinishedStepIdx","findLastIndex","getUnfinishedStepsMessages","grouppedStepsMessage","filter","isPromise","obj","then"],"sources":["../../../src/sdk/utils.ts"],"sourcesContent":["import type { FixtureResult, Label, StatusDetails, StepResult, TestResult } from \"../model.js\";\nimport { LabelName, Status } from \"../model.js\";\nimport type { RuntimeMessage } from \"./types.js\";\n\nexport const getStatusFromError = (error: Error): Status => {\n  switch (true) {\n    /**\n     * Native `node:assert` and `chai` (`vitest` uses it under the hood) throw `AssertionError`\n     * `jest` throws `JestAssertionError` instance\n     * `jasmine` throws `ExpectationFailed` instance\n     */\n    case /assert/gi.test(error.constructor.name):\n    case /expectation/gi.test(error.constructor.name):\n    case /assert/gi.test(error.name):\n    case /assert/gi.test(error.message):\n      return Status.FAILED;\n    default:\n      return Status.BROKEN;\n  }\n};\n\n/**\n * Source: https://github.com/chalk/ansi-regex\n */\nconst ansiRegex = ({ onlyFirst = false } = {}) => {\n  const pattern = [\n    \"[\\\\u001B\\\\u009B][[\\\\]()#;?]*(?:(?:(?:(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]+)*|[a-zA-Z\\\\d]+(?:;[-a-zA-Z\\\\d\\\\/#&.:=?%@~_]*)*)?\\\\u0007)\",\n    \"(?:(?:\\\\d{1,4}(?:;\\\\d{0,4})*)?[\\\\dA-PR-TZcf-nq-uy=><~]))\",\n  ].join(\"|\");\n\n  return new RegExp(pattern, onlyFirst ? undefined : \"g\");\n};\n\n/**\n * https://github.com/chalk/strip-ansi\n */\nexport const stripAnsi = (str: string): string => {\n  const regex = ansiRegex();\n  return str.replace(regex, \"\");\n};\n\nexport const getMessageAndTraceFromError = (\n  error: Error | { message?: string; stack?: string },\n): Pick<StatusDetails, \"message\" | \"trace\"> => {\n  const { message, stack } = error;\n  return {\n    message: message ? stripAnsi(message) : undefined,\n    trace: stack ? stripAnsi(stack) : undefined,\n  };\n};\n\nexport const allureIdRegexp = /(?:^|\\s)@?allure\\.id[:=](?<id>[^\\s]+)/;\nexport const allureIdRegexpGlobal = new RegExp(allureIdRegexp, \"g\");\nexport const allureLabelRegexp = /(?:^|\\s)@?allure\\.label\\.(?<name>[^:=\\s]+)[:=](?<value>[^\\s]+)/;\nexport const allureLabelRegexpGlobal = new RegExp(allureLabelRegexp, \"g\");\n\nexport const isMetadataTag = (tag: string) => {\n  return allureIdRegexp.test(tag) || allureLabelRegexp.test(tag);\n};\n\nexport const extractMetadataFromString = (\n  title: string,\n): {\n  labels: Label[];\n  cleanTitle: string;\n} => {\n  const labels = [] as Label[];\n\n  title.split(\" \").forEach((val) => {\n    const idValue = val.match(allureIdRegexp)?.groups?.id;\n\n    if (idValue) {\n      labels.push({ name: LabelName.ALLURE_ID, value: idValue });\n    }\n\n    const labelMatch = val.match(allureLabelRegexp);\n    const { name, value } = labelMatch?.groups || {};\n\n    if (name && value) {\n      labels?.push({ name, value });\n    }\n  });\n\n  const cleanTitle = title.replace(allureLabelRegexpGlobal, \"\").replace(allureIdRegexpGlobal, \"\").trim();\n\n  return { labels, cleanTitle };\n};\n\nexport const isAnyStepFailed = (item: StepResult | TestResult | FixtureResult): boolean => {\n  const isFailed = item.status === Status.FAILED;\n\n  if (isFailed || item.steps.length === 0) {\n    return isFailed;\n  }\n\n  return !!item.steps.find((step) => isAnyStepFailed(step));\n};\n\nexport const isAllStepsEnded = (item: StepResult | TestResult | FixtureResult): boolean => {\n  return item.steps.every((val) => val.stop && isAllStepsEnded(val));\n};\n\nexport const hasLabel = (testResult: TestResult, labelName: LabelName | string): boolean => {\n  return !!testResult.labels.find((l) => l.name === labelName);\n};\n\nexport const hasStepMessage = (messages: RuntimeMessage[]) => {\n  return messages.some((message) => message.type === \"step_start\" || message.type === \"step_stop\");\n};\n\nexport const getStepsMessagesPair = (messages: RuntimeMessage[]) =>\n  messages.reduce((acc, message) => {\n    if (message.type !== \"step_start\" && message.type !== \"step_stop\") {\n      return acc;\n    }\n\n    if (message.type === \"step_start\") {\n      acc.push([message]);\n\n      return acc;\n    }\n\n    const unfinishedStepIdx = acc.findLastIndex((step) => step.length === 1);\n\n    if (unfinishedStepIdx === -1) {\n      return acc;\n    }\n\n    acc[unfinishedStepIdx].push(message);\n\n    return acc;\n  }, [] as RuntimeMessage[][]);\n\nexport const getUnfinishedStepsMessages = (messages: RuntimeMessage[]) => {\n  const grouppedStepsMessage = getStepsMessagesPair(messages);\n\n  return grouppedStepsMessage.filter((step) => step.length === 1);\n};\n\nexport const isPromise = <T = any>(obj: any): obj is PromiseLike<T> =>\n  !!obj && (typeof obj === \"object\" || typeof obj === \"function\") && typeof obj.then === \"function\";\n"],"mappings":";;;;;;AACA,IAAAA,MAAA,GAAAC,OAAA;AAAgD,SAAAC,YAAA,IAAAA,WAAA,YAAAA,YAAAC,CAAA,EAAAC,CAAA,eAAAC,WAAA,CAAAF,CAAA,UAAAC,CAAA,UAAAD,CAAA,GAAAG,MAAA,CAAAC,SAAA,EAAAH,CAAA,OAAAI,OAAA,aAAAH,YAAAF,CAAA,EAAAM,CAAA,EAAAC,CAAA,QAAAC,CAAA,GAAAL,MAAA,CAAAH,CAAA,EAAAM,CAAA,UAAAL,CAAA,CAAAQ,GAAA,CAAAD,CAAA,EAAAD,CAAA,IAAAN,CAAA,CAAAS,GAAA,CAAAV,CAAA,IAAAW,eAAA,CAAAH,CAAA,EAAAN,WAAA,CAAAE,SAAA,cAAAQ,YAAAZ,CAAA,EAAAM,CAAA,QAAAC,CAAA,GAAAN,CAAA,CAAAS,GAAA,CAAAJ,CAAA,UAAAO,MAAA,CAAAC,IAAA,CAAAP,CAAA,EAAAQ,MAAA,WAAAd,CAAA,EAAAK,CAAA,QAAAE,CAAA,GAAAD,CAAA,CAAAD,CAAA,0BAAAE,CAAA,EAAAP,CAAA,CAAAK,CAAA,IAAAN,CAAA,CAAAQ,CAAA,kBAAAQ,CAAA,iBAAAhB,CAAA,CAAAQ,CAAA,CAAAQ,CAAA,MAAAA,CAAA,OAAAR,CAAA,CAAAS,MAAA,GAAAD,CAAA,IAAAf,CAAA,CAAAK,CAAA,IAAAN,CAAA,CAAAQ,CAAA,CAAAQ,CAAA,aAAAf,CAAA,KAAAY,MAAA,CAAAK,MAAA,kBAAAC,SAAA,CAAAjB,WAAA,EAAAC,MAAA,GAAAD,WAAA,CAAAE,SAAA,CAAAgB,IAAA,aAAAnB,CAAA,QAAAK,CAAA,GAAAN,CAAA,CAAAoB,IAAA,CAAAC,IAAA,OAAApB,CAAA,OAAAK,CAAA,IAAAA,CAAA,CAAAgB,MAAA,GAAAV,WAAA,CAAAN,CAAA,aAAAC,CAAA,GAAAD,CAAA,CAAAiB,OAAA,EAAAhB,CAAA,KAAAA,CAAA,CAAAe,MAAA,GAAAV,WAAA,CAAAL,CAAA,mBAAAD,CAAA,KAAAJ,WAAA,CAAAE,SAAA,CAAAoB,MAAA,CAAAC,OAAA,cAAAnB,CAAA,EAAAC,CAAA,2BAAAA,CAAA,QAAAC,CAAA,GAAAP,CAAA,CAAAS,GAAA,eAAAV,CAAA,CAAAwB,MAAA,CAAAC,OAAA,EAAAJ,IAAA,OAAAf,CAAA,EAAAC,CAAA,CAAAkB,OAAA,2BAAAzB,CAAA,EAAAC,CAAA,QAAAK,CAAA,GAAAE,CAAA,CAAAP,CAAA,iBAAAyB,KAAA,CAAAC,OAAA,CAAArB,CAAA,IAAAA,CAAA,CAAAsB,IAAA,QAAAtB,CAAA,mCAAAC,CAAA,QAAAS,CAAA,gBAAAhB,CAAA,CAAAwB,MAAA,CAAAC,OAAA,EAAAJ,IAAA,OAAAf,CAAA,oBAAAN,CAAA,GAAA6B,SAAA,4BAAA7B,CAAA,CAAAA,CAAA,CAAAiB,MAAA,UAAAjB,CAAA,MAAA8B,KAAA,CAAAT,IAAA,CAAArB,CAAA,GAAA+B,IAAA,CAAAnB,WAAA,CAAAZ,CAAA,EAAAgB,CAAA,IAAAT,CAAA,CAAAyB,KAAA,OAAAhC,CAAA,gBAAAA,CAAA,CAAAwB,MAAA,CAAAC,OAAA,EAAAJ,IAAA,OAAAf,CAAA,EAAAC,CAAA,MAAAR,WAAA,CAAAiC,KAAA,OAAAH,SAAA;AAAA,SAAAV,UAAAb,CAAA,EAAAN,CAAA,6BAAAA,CAAA,aAAAA,CAAA,YAAAiC,SAAA,wDAAA3B,CAAA,CAAAF,SAAA,GAAAS,MAAA,CAAAK,MAAA,CAAAlB,CAAA,IAAAA,CAAA,CAAAI,SAAA,IAAA8B,WAAA,IAAAC,KAAA,EAAA7B,CAAA,EAAA8B,QAAA,MAAAC,YAAA,WAAAxB,MAAA,CAAAyB,cAAA,CAAAhC,CAAA,iBAAA8B,QAAA,SAAApC,CAAA,IAAAW,eAAA,CAAAL,CAAA,EAAAN,CAAA;AAAA,SAAAW,gBAAAL,CAAA,EAAAN,CAAA,WAAAW,eAAA,GAAAE,MAAA,CAAA0B,cAAA,GAAA1B,MAAA,CAAA0B,cAAA,CAAAC,IAAA,eAAAlC,CAAA,EAAAN,CAAA,WAAAM,CAAA,CAAAmC,SAAA,GAAAzC,CAAA,EAAAM,CAAA,KAAAK,eAAA,CAAAL,CAAA,EAAAN,CAAA;AAGzC,IAAM0C,kBAAkB,GAAIC,KAAY,IAAa;EAC1D,QAAQ,IAAI;IACV;AACJ;AACA;AACA;AACA;IACI,KAAK,UAAU,CAACC,IAAI,CAACD,KAAK,CAACT,WAAW,CAACW,IAAI,CAAC;IAC5C,KAAK,eAAe,CAACD,IAAI,CAACD,KAAK,CAACT,WAAW,CAACW,IAAI,CAAC;IACjD,KAAK,UAAU,CAACD,IAAI,CAACD,KAAK,CAACE,IAAI,CAAC;IAChC,KAAK,UAAU,CAACD,IAAI,CAACD,KAAK,CAACG,OAAO,CAAC;MACjC,OAAOC,aAAM,CAACC,MAAM;IACtB;MACE,OAAOD,aAAM,CAACE,MAAM;EACxB;AACF,CAAC;;AAED;AACA;AACA;AAFAC,OAAA,CAAAR,kBAAA,GAAAA,kBAAA;AAGA,IAAMS,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAmC;EAAA,IAA/B;IAAEC,SAAS,GAAG;EAAM,CAAC,GAAAvB,SAAA,CAAAZ,MAAA,QAAAY,SAAA,QAAAwB,SAAA,GAAAxB,SAAA,MAAG,CAAC,CAAC;EAC3C,IAAMyB,OAAO,GAAG,CACd,8HAA8H,EAC9H,0DAA0D,CAC3D,CAAC1B,IAAI,CAAC,GAAG,CAAC;EAEX,OAAO,IAAIzB,MAAM,CAACmD,OAAO,EAAEF,SAAS,GAAGC,SAAS,GAAG,GAAG,CAAC;AACzD,CAAC;;AAED;AACA;AACA;AACO,IAAME,SAAS,GAAIC,GAAW,IAAa;EAChD,IAAMC,KAAK,GAAGN,SAAS,CAAC,CAAC;EACzB,OAAOK,GAAG,CAAC/B,OAAO,CAACgC,KAAK,EAAE,EAAE,CAAC;AAC/B,CAAC;AAACP,OAAA,CAAAK,SAAA,GAAAA,SAAA;AAEK,IAAMG,2BAA2B,GACtCf,KAAmD,IACN;EAC7C,IAAM;IAAEG,OAAO;IAAEa;EAAM,CAAC,GAAGhB,KAAK;EAChC,OAAO;IACLG,OAAO,EAAEA,OAAO,GAAGS,SAAS,CAACT,OAAO,CAAC,GAAGO,SAAS;IACjDO,KAAK,EAAED,KAAK,GAAGJ,SAAS,CAACI,KAAK,CAAC,GAAGN;EACpC,CAAC;AACH,CAAC;AAACH,OAAA,CAAAQ,2BAAA,GAAAA,2BAAA;AAEK,IAAMG,cAAc,GAAAX,OAAA,CAAAW,cAAA,gBAAA9D,WAAA,CAAG,kCAAuC;EAAA+D,EAAA;AAAA;AAC9D,IAAMC,oBAAoB,GAAAb,OAAA,CAAAa,oBAAA,GAAG,IAAI5D,MAAM,CAAC0D,cAAc,EAAE,GAAG,CAAC;AAC5D,IAAMG,iBAAiB,GAAAd,OAAA,CAAAc,iBAAA,gBAAAjE,WAAA,CAAG,iDAAgE;EAAA8C,IAAA;EAAAV,KAAA;AAAA;AAC1F,IAAM8B,uBAAuB,GAAAf,OAAA,CAAAe,uBAAA,GAAG,IAAI9D,MAAM,CAAC6D,iBAAiB,EAAE,GAAG,CAAC;AAElE,IAAME,aAAa,GAAIC,GAAW,IAAK;EAC5C,OAAON,cAAc,CAACjB,IAAI,CAACuB,GAAG,CAAC,IAAIH,iBAAiB,CAACpB,IAAI,CAACuB,GAAG,CAAC;AAChE,CAAC;AAACjB,OAAA,CAAAgB,aAAA,GAAAA,aAAA;AAEK,IAAME,yBAAyB,GACpCC,KAAa,IAIV;EACH,IAAMC,MAAM,GAAG,EAAa;EAE5BD,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAEC,GAAG,IAAK;IAAA,IAAAC,UAAA;IAChC,IAAMC,OAAO,IAAAD,UAAA,GAAGD,GAAG,CAACG,KAAK,CAACf,cAAc,CAAC,cAAAa,UAAA,gBAAAA,UAAA,GAAzBA,UAAA,CAA2BpD,MAAM,cAAAoD,UAAA,uBAAjCA,UAAA,CAAmCZ,EAAE;IAErD,IAAIa,OAAO,EAAE;MACXL,MAAM,CAACvC,IAAI,CAAC;QAAEc,IAAI,EAAEgC,gBAAS,CAACC,SAAS;QAAE3C,KAAK,EAAEwC;MAAQ,CAAC,CAAC;IAC5D;IAEA,IAAMI,UAAU,GAAGN,GAAG,CAACG,KAAK,CAACZ,iBAAiB,CAAC;IAC/C,IAAM;MAAEnB,IAAI;MAAEV;IAAM,CAAC,GAAG,CAAA4C,UAAU,aAAVA,UAAU,uBAAVA,UAAU,CAAEzD,MAAM,KAAI,CAAC,CAAC;IAEhD,IAAIuB,IAAI,IAAIV,KAAK,EAAE;MACjBmC,MAAM,aAANA,MAAM,eAANA,MAAM,CAAEvC,IAAI,CAAC;QAAEc,IAAI;QAAEV;MAAM,CAAC,CAAC;IAC/B;EACF,CAAC,CAAC;EAEF,IAAM6C,UAAU,GAAGX,KAAK,CAAC5C,OAAO,CAACwC,uBAAuB,EAAE,EAAE,CAAC,CAACxC,OAAO,CAACsC,oBAAoB,EAAE,EAAE,CAAC,CAACkB,IAAI,CAAC,CAAC;EAEtG,OAAO;IAAEX,MAAM;IAAEU;EAAW,CAAC;AAC/B,CAAC;AAAC9B,OAAA,CAAAkB,yBAAA,GAAAA,yBAAA;AAEK,IAAMc,eAAe,GAAIC,IAA6C,IAAc;EACzF,IAAMC,QAAQ,GAAGD,IAAI,CAACE,MAAM,KAAKtC,aAAM,CAACC,MAAM;EAE9C,IAAIoC,QAAQ,IAAID,IAAI,CAACG,KAAK,CAACrE,MAAM,KAAK,CAAC,EAAE;IACvC,OAAOmE,QAAQ;EACjB;EAEA,OAAO,CAAC,CAACD,IAAI,CAACG,KAAK,CAACC,IAAI,CAAEC,IAAI,IAAKN,eAAe,CAACM,IAAI,CAAC,CAAC;AAC3D,CAAC;AAACtC,OAAA,CAAAgC,eAAA,GAAAA,eAAA;AAEK,IAAMO,eAAe,GAAIN,IAA6C,IAAc;EACzF,OAAOA,IAAI,CAACG,KAAK,CAACI,KAAK,CAAEjB,GAAG,IAAKA,GAAG,CAACkB,IAAI,IAAIF,eAAe,CAAChB,GAAG,CAAC,CAAC;AACpE,CAAC;AAACvB,OAAA,CAAAuC,eAAA,GAAAA,eAAA;AAEK,IAAMG,QAAQ,GAAGA,CAACC,UAAsB,EAAEC,SAA6B,KAAc;EAC1F,OAAO,CAAC,CAACD,UAAU,CAACvB,MAAM,CAACiB,IAAI,CAAEQ,CAAC,IAAKA,CAAC,CAAClD,IAAI,KAAKiD,SAAS,CAAC;AAC9D,CAAC;AAAC5C,OAAA,CAAA0C,QAAA,GAAAA,QAAA;AAEK,IAAMI,cAAc,GAAIC,QAA0B,IAAK;EAC5D,OAAOA,QAAQ,CAACC,IAAI,CAAEpD,OAAO,IAAKA,OAAO,CAACqD,IAAI,KAAK,YAAY,IAAIrD,OAAO,CAACqD,IAAI,KAAK,WAAW,CAAC;AAClG,CAAC;AAACjD,OAAA,CAAA8C,cAAA,GAAAA,cAAA;AAEK,IAAMI,oBAAoB,GAAIH,QAA0B,IAC7DA,QAAQ,CAAClF,MAAM,CAAC,CAACsF,GAAG,EAAEvD,OAAO,KAAK;EAChC,IAAIA,OAAO,CAACqD,IAAI,KAAK,YAAY,IAAIrD,OAAO,CAACqD,IAAI,KAAK,WAAW,EAAE;IACjE,OAAOE,GAAG;EACZ;EAEA,IAAIvD,OAAO,CAACqD,IAAI,KAAK,YAAY,EAAE;IACjCE,GAAG,CAACtE,IAAI,CAAC,CAACe,OAAO,CAAC,CAAC;IAEnB,OAAOuD,GAAG;EACZ;EAEA,IAAMC,iBAAiB,GAAGD,GAAG,CAACE,aAAa,CAAEf,IAAI,IAAKA,IAAI,CAACvE,MAAM,KAAK,CAAC,CAAC;EAExE,IAAIqF,iBAAiB,KAAK,CAAC,CAAC,EAAE;IAC5B,OAAOD,GAAG;EACZ;EAEAA,GAAG,CAACC,iBAAiB,CAAC,CAACvE,IAAI,CAACe,OAAO,CAAC;EAEpC,OAAOuD,GAAG;AACZ,CAAC,EAAE,EAAwB,CAAC;AAACnD,OAAA,CAAAkD,oBAAA,GAAAA,oBAAA;AAExB,IAAMI,0BAA0B,GAAIP,QAA0B,IAAK;EACxE,IAAMQ,oBAAoB,GAAGL,oBAAoB,CAACH,QAAQ,CAAC;EAE3D,OAAOQ,oBAAoB,CAACC,MAAM,CAAElB,IAAI,IAAKA,IAAI,CAACvE,MAAM,KAAK,CAAC,CAAC;AACjE,CAAC;AAACiC,OAAA,CAAAsD,0BAAA,GAAAA,0BAAA;AAEK,IAAMG,SAAS,GAAaC,GAAQ,IACzC,CAAC,CAACA,GAAG,KAAK,OAAOA,GAAG,KAAK,QAAQ,IAAI,OAAOA,GAAG,KAAK,UAAU,CAAC,IAAI,OAAOA,GAAG,CAACC,IAAI,KAAK,UAAU;AAAC3D,OAAA,CAAAyD,SAAA,GAAAA,SAAA","ignoreList":[]}